
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
import pandas as pd
from generator import *
# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():

    print("0: Enter Phi Operators")
    print("1: Enter Filename")
    choice = input("Enter which way you would like to input the query: ")
    
    
    class mf_struct:
        def __init__(self):
            self.s = [] # projected values
            self.n = 0 # number of grouping variables
            self.v = [] # group by attributes
            self.F = [] # list of aggregates
            self.sigma = [] # grouping variables predicates 
            self.G = None # having clause
    
    select = ""
    From = ""
    where = ""
    group_by = ""
    such_that = ""
    having = ""
    group_by_vars = []
    V = []
    F_VECT = []

    mf_struct = mf_struct() 
    schemaData = schema_info()   

    if choice == "0":
        s, n, v, F, sigma, G = user_input()
        group_by_vars, V, F_VECT = process_user_input(s, n, v, F, sigma, G, mf_struct, schemaData)

    elif choice == "1":
        file_name = file_input()
        select, From, where, group_by, such_that, having = read_file(file_name)
        group_by_vars, V, F_VECT = process_info(select, group_by, such_that, having, mf_struct, schemaData)
    
    else:
        return "Try Again"


    
    H = H_table(where, such_that, having, group_by_vars, F_VECT, mf_struct)
    
    
    return tabulate.tabulate(H,
                        headers="keys", tablefmt="psql", showindex=False)

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    